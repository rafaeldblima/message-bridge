<?xml version="1.0" encoding="UTF-8"?>
<project version="4">
  <component name="CopilotDiffPersistence">
    <option name="pendingDiffs">
      <map>
        <entry key="$PROJECT_DIR$/src/test/java/com/example/messagebridge/integration/MessageBridgeIntegrationTest.java">
          <value>
            <PendingDiffInfo>
              <option name="filePath" value="$PROJECT_DIR$/src/test/java/com/example/messagebridge/integration/MessageBridgeIntegrationTest.java" />
              <option name="originalContent" value="package com.example.messagebridge.integration;&#10;&#10;import org.junit.jupiter.api.Disabled;&#10;import org.junit.jupiter.api.Test;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.test.context.ActiveProfiles;&#10;import org.springframework.test.context.DynamicPropertyRegistry;&#10;import org.springframework.test.context.DynamicPropertySource;&#10;import org.testcontainers.containers.RabbitMQContainer;&#10;import org.testcontainers.junit.jupiter.Container;&#10;import org.testcontainers.junit.jupiter.Testcontainers;&#10;import org.testcontainers.utility.DockerImageName;&#10;&#10;@SpringBootTest&#10;@ActiveProfiles(&quot;test&quot;)&#10;@Testcontainers&#10;class MessageBridgeIntegrationTest {&#10;&#10;    @Container&#10;    static RabbitMQContainer rabbitMQ = new RabbitMQContainer(DockerImageName.parse(&quot;rabbitmq:3-management&quot;))&#10;            .withUser(&quot;admin&quot;, &quot;admin123&quot;)&#10;            .withVhost(&quot;/&quot;);&#10;&#10;    @DynamicPropertySource&#10;    static void configureProperties(DynamicPropertyRegistry registry) {&#10;        // Configure source RabbitMQ binder&#10;        registry.add(&quot;spring.cloud.stream.binders.rabbit-source.environment.spring.rabbitmq.addresses&quot;, &#10;                () -&gt; rabbitMQ.getHost() + &quot;:&quot; + rabbitMQ.getAmqpPort());&#10;        registry.add(&quot;spring.cloud.stream.binders.rabbit-source.environment.spring.rabbitmq.username&quot;, () -&gt; &quot;admin&quot;);&#10;        registry.add(&quot;spring.cloud.stream.binders.rabbit-source.environment.spring.rabbitmq.password&quot;, () -&gt; &quot;admin123&quot;);&#10;        registry.add(&quot;spring.cloud.stream.binders.rabbit-source.environment.spring.rabbitmq.virtual-host&quot;, () -&gt; &quot;/&quot;);&#10;        &#10;        // Configure destination RabbitMQ binder (using same instance for test)&#10;        registry.add(&quot;spring.cloud.stream.binders.rabbit-destination.environment.spring.rabbitmq.addresses&quot;, &#10;                () -&gt; rabbitMQ.getHost() + &quot;:&quot; + rabbitMQ.getAmqpPort());&#10;        registry.add(&quot;spring.cloud.stream.binders.rabbit-destination.environment.spring.rabbitmq.username&quot;, () -&gt; &quot;admin&quot;);&#10;        registry.add(&quot;spring.cloud.stream.binders.rabbit-destination.environment.spring.rabbitmq.password&quot;, () -&gt; &quot;admin123&quot;);&#10;        registry.add(&quot;spring.cloud.stream.binders.rabbit-destination.environment.spring.rabbitmq.virtual-host&quot;, () -&gt; &quot;/&quot;);&#10;    }&#10;&#10;    @Test&#10;    @Disabled(&quot;Requires Docker to be available - enable for local integration testing&quot;)&#10;    void shouldStartApplicationWithRabbitMQ() {&#10;        // This test verifies that the application can start successfully with a real RabbitMQ instance&#10;        // The actual message flow testing would require more complex setup with RabbitMQ clients&#10;    }&#10;}" />
              <option name="updatedContent" value="package com.example.messagebridge.integration;&#10;&#10;import org.junit.jupiter.api.Disabled;&#10;import org.junit.jupiter.api.Test;&#10;import org.springframework.boot.test.context.SpringBootTest;&#10;import org.springframework.test.context.ActiveProfiles;&#10;import org.springframework.test.context.DynamicPropertyRegistry;&#10;import org.springframework.test.context.DynamicPropertySource;&#10;import org.testcontainers.containers.RabbitMQContainer;&#10;import org.testcontainers.junit.jupiter.Container;&#10;import org.testcontainers.junit.jupiter.Testcontainers;&#10;import org.testcontainers.utility.DockerImageName;&#10;&#10;@SpringBootTest&#10;@ActiveProfiles(&quot;test&quot;)&#10;@Testcontainers&#10;class MessageBridgeIntegrationTest {&#10;&#10;    @Container&#10;    static RabbitMQContainer rabbitMQ = new RabbitMQContainer(DockerImageName.parse(&quot;rabbitmq:3-management&quot;))&#10;            .withUsername(&quot;admin&quot;)&#10;            .withPassword(&quot;admin123&quot;)&#10;            .withVirtualHost(&quot;/&quot;);&#10;&#10;    @DynamicPropertySource&#10;    static void configureProperties(DynamicPropertyRegistry registry) {&#10;        // Configure source RabbitMQ binder&#10;        registry.add(&quot;spring.cloud.stream.binders.rabbit-source.environment.spring.rabbitmq.addresses&quot;, &#10;                () -&gt; rabbitMQ.getHost() + &quot;:&quot; + rabbitMQ.getAmqpPort());&#10;        registry.add(&quot;spring.cloud.stream.binders.rabbit-source.environment.spring.rabbitmq.username&quot;, () -&gt; &quot;admin&quot;);&#10;        registry.add(&quot;spring.cloud.stream.binders.rabbit-source.environment.spring.rabbitmq.password&quot;, () -&gt; &quot;admin123&quot;);&#10;        registry.add(&quot;spring.cloud.stream.binders.rabbit-source.environment.spring.rabbitmq.virtual-host&quot;, () -&gt; &quot;/&quot;);&#10;        &#10;        // Configure destination RabbitMQ binder (using same instance for test)&#10;        registry.add(&quot;spring.cloud.stream.binders.rabbit-destination.environment.spring.rabbitmq.addresses&quot;, &#10;                () -&gt; rabbitMQ.getHost() + &quot;:&quot; + rabbitMQ.getAmqpPort());&#10;        registry.add(&quot;spring.cloud.stream.binders.rabbit-destination.environment.spring.rabbitmq.username&quot;, () -&gt; &quot;admin&quot;);&#10;        registry.add(&quot;spring.cloud.stream.binders.rabbit-destination.environment.spring.rabbitmq.password&quot;, () -&gt; &quot;admin123&quot;);&#10;        registry.add(&quot;spring.cloud.stream.binders.rabbit-destination.environment.spring.rabbitmq.virtual-host&quot;, () -&gt; &quot;/&quot;);&#10;    }&#10;&#10;    @Test&#10;    @Disabled(&quot;Requires Docker to be available - enable for local integration testing&quot;)&#10;    void shouldStartApplicationWithRabbitMQ() {&#10;        // This test verifies that the application can start successfully with a real RabbitMQ instance&#10;        // The actual message flow testing would require more complex setup with RabbitMQ clients&#10;    }&#10;}" />
            </PendingDiffInfo>
          </value>
        </entry>
      </map>
    </option>
  </component>
</project>